{"version":3,"sources":["components/container/container.js","components/gameCard/gameCard.js","components/instructions/instructions.js","components/gameMessage/gameMessage.js","components/header/header.js","components/footer/footer.js","components/game/game.js","App.js","registerServiceWorker.js","index.js"],"names":["container","props","react_default","a","createElement","className","children","gameCard","role","aria-label","concat","animate","style","backgroundImage","image","onClick","handleClick","id","instructions","reactstrap_es","message","gameMessage","state","animating","renderMessage","_this","addAnimation","prevProps","newState","score","topScore","this","setState","_this2","onAnimationEnd","Component","header","components_gameMessage_gameMessage","footer","alt","src","href","target","game","data","shuffleDeck","sort","b","Math","random","resetDeck","resetData","map","item","Object","objectSpread","clicked","correctGuess","newData","newScore","newTopScore","max","animation","wrongGuess","gameCardClick","guessedCorrectly","components_header_header","components_instructions_instructions","components_container_container","components_gameCard_gameCard","key","components_footer_footer","App","components_game_game","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.f6474b55.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./container.css\";\r\n\r\nconst container = props => <main className=\"container\">{props.children}</main>;\r\n\r\nexport default container;","import React from \"react\";\r\nimport \"./gameCard.css\";\r\n\r\nconst gameCard = props => (\r\n    <div\r\n        role=\"img\"\r\n        aria-label=\"click item\"\r\n        className={`gameCard ${props.animate? \"animated wobble\": \"\"}`} \r\n        style={{ backgroundImage: `url(\"${props.image}\")` }}\r\n        onClick={() => props.handleClick(props.id)}\r\n    /> \r\n);\r\n\r\nexport default gameCard;","import React from \"react\";\r\nimport { Jumbotron } from 'reactstrap';\r\nimport \"./instructions.css\";\r\n\r\nconst instructions = (props) => (\r\n    <div className=\"jumbo\">\r\n        <Jumbotron >\r\n            <h3 className=\" animated fadeInDown instructions\">{props.message}</h3>\r\n        </Jumbotron>\r\n    </div>\r\n);\r\n\r\nexport default instructions;","import React, {Component} from \"react\";\r\nimport \"./gameMessage.css\";\r\n\r\nclass gameMessage extends Component {\r\n\r\n    state = {\r\n        animating: false,\r\n        message: \"\"\r\n    }\r\n\r\n    // function runs on every state change\r\n    componentDidUpdate(prevProps) {\r\n\r\n      // will be passed into setState function\r\n      let newState = {\r\n        animating: true\r\n      }\r\n\r\n      // deconstruct score and topScore from the pervious state\r\n      const {score, topScore} = prevProps\r\n\r\n      // change message if user guess correclty or incorrectly\r\n      if (score === 0 && topScore === 0) {\r\n        newState.message = \"\";\r\n      } else if (score !== 0 && topScore > 0) {\r\n        newState.message = \"correct\";\r\n      } else {\r\n        newState.message = \"incorrect\";\r\n      }\r\n\r\n      // set the state with the new message if the score changes, \r\n      // or the message and state message are not equal\r\n      if (score !== this.props.score || this.state.message !== newState.message) {\r\n        this.setState(newState);\r\n      }\r\n  \r\n    }\r\n\r\n    // change the display message based on the message state\r\n    renderMessage = () => {\r\n        switch (this.state.message) {\r\n        case \"correct\":\r\n          return \"You guessed correctly!\";\r\n        case \"incorrect\":\r\n          return \"You guessed incorrectly!\";\r\n        default:\r\n          return \"Click a character to begin!\";\r\n        }\r\n    };\r\n\r\n    // add animation class when animateClass state updates\r\n    // animations from aniamte.css library\r\n    // https://daneden.github.io/animate.css/\r\n    addAnimation = () => {\r\n      switch (this.state.message) {\r\n        case \"correct\":\r\n          return \"animated pulse\";\r\n        case \"incorrect\":\r\n          return \"animated wobble\";\r\n        default:\r\n          return \"\";\r\n        }     \r\n    }\r\n\r\n    render() {\r\n        return(\r\n          <li \r\n            // if the state.aniamtion = true, add the class from animate.css to trigger the animation,\r\n            // also add the state.message as a class, which changes the color,\r\n            // if aniamtion.state = false, remove the aniamte.css class and add the '.black' class\r\n            className={` \r\n              gameMessage \r\n              ${this.state.animating? this.addAnimation(): \"\"}  \r\n              ${this.state.animating? this.state.message: \"black\"}\r\n            `}\r\n            id={`${this.state.message}`}\r\n            // set the animation state back to false after the classes are added\r\n            onAnimationEnd={() => this.setState({ animating: false })} \r\n          >\r\n            {this.renderMessage()}\r\n          </li>  \r\n        );\r\n    }\r\n}\r\n\r\nexport default gameMessage;","import React from \"react\";\r\nimport \"./header.css\";\r\nimport GameMessage from \"../gameMessage\";\r\n\r\nconst header = props => (\r\n    <div className=\"header\">\r\n        <ul>\r\n            <li><h2 className=\" title animated swing\">Clicky Game</h2></li>\r\n            <GameMessage score={props.score} topScore={props.topScore} />\r\n            <li id=\"score\">Score: {props.score} | Top Score: {props.topScore}</li>\r\n        </ul>\r\n        \r\n    </div>\r\n)\r\n\r\nexport default header;","import React from \"react\";\r\nimport \"./footer.css\";\r\n\r\nconst footer = () => (\r\n    <footer className=\"footer\">\r\n        <div className=\"bottom\">\r\n            <ul id='footer-list'>\r\n                <li><span><img className='logo' id=\"reactLogo\" alt=\"reactLogo\" src=\"assets/images/react-logo.png\"/></span> Clicky Game!</li>\r\n                <li>@ 2018 Vidhi Panchal</li>\r\n                <li><a href=\"https://github.com/vidhi27/clicky-game\" target=\"blank\"><span><img className='logo' alt=\"github\" src=\"assets/images/github.png\"/></span> Github</a></li>\r\n            </ul>\r\n        </div>\r\n    </footer>\r\n)\r\n\r\nexport default footer;","import React, { Component } from \"react\";\r\nimport Container from \"../container\";\r\nimport GameCard from \"../gameCard\";\r\nimport Instructions from \"../instructions\";\r\nimport Header from \"../header\";\r\nimport Footer from \"../footer\";\r\nimport data from \"../../data\";\r\n\r\n\r\nclass game extends Component {\r\n\r\n    state = {\r\n        data,\r\n        score: 0,\r\n        topScore: 0,\r\n        message: \"Click as many images as you can without repeating\"\r\n    };\r\n\r\n    // function gets called when the page loads\r\n    componentDidMount() {\r\n        // reorders the dataarray on state changes\r\n        this.setState({ data: this.shuffleDeck(this.state.data) });\r\n    }\r\n\r\n    // shuffle the imported data array in random order\r\n    shuffleDeck = data => {\r\n        let newData = data.sort(function(a, b){return 0.5 - Math.random()});\r\n        return newData;\r\n    };\r\n\r\n    // resets all the clicked properties to false\r\n    resetDeck = data => {\r\n        const resetData = data.map(item => ({ ...item, clicked: false }));\r\n        // console.log(data);\r\n        // console.log(resetData);\r\n        return this.shuffleDeck(resetData);\r\n      };\r\n\r\n    // checks to see if score is higher than the topscore then updates the state with the update array\r\n    correctGuess = newData => {\r\n        let newScore = this.state.score;\r\n        newScore++\r\n        let newTopScore = Math.max(newScore, this.state.topScore);\r\n\r\n        this.setState({\r\n            data: this.shuffleDeck(newData),\r\n            score: newScore,\r\n            topScore: newTopScore,\r\n            animation: \"animated swing\"\r\n        })\r\n    }\r\n\r\n    // restarts the game with fresh data\r\n    wrongGuess = newData => {\r\n        this.setState({\r\n            data: this.resetDeck(newData),\r\n            score: 0\r\n        })\r\n    }\r\n\r\n    // when a card is clicked, check if it has been clicked before,\r\n    // then update that cards clicked property\r\n    gameCardClick = id => {\r\n        let guessedCorrectly = false;\r\n        // newData will be the data array with updated clicked properties\r\n        const newData = this.state.data.map(item => {\r\n          if (item.id === id) {\r\n            if (!item.clicked) {\r\n              item.clicked = true;\r\n              guessedCorrectly = true;\r\n            }\r\n          }\r\n          return item;     \r\n        });\r\n        // if guessedCorrectly = true, run the correctGuess function,\r\n        // else run the wrongGuess function\r\n        guessedCorrectly ? this.correctGuess(newData) : this.wrongGuess(newData);\r\n      };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"animated fadeIn\">\r\n                <Header score={this.state.score} topScore = {this.state.topScore} />\r\n                <Instructions message={this.state.message} />\r\n                <Container>\r\n                    {\r\n                        this.state.data.map(item => (\r\n                            <div className=\"animated rollIn\">\r\n                                <GameCard\r\n                                    key={item.id}\r\n                                    id={item.id} \r\n                                    image={item.image}\r\n                                    animate={!this.state.score && this.state.topScore}\r\n                                    clicked={item.clicked}\r\n                                    handleClick={this.gameCardClick}\r\n                                />      \r\n                            </div>  \r\n                        ))\r\n                    }\r\n                </Container>\r\n                <Footer />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default game;","import React from 'react';\nimport Game from \"./components/game\" \n\nconst App = () => <Game/>;\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();"],"sourceRoot":""}